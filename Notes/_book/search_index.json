[
["conditionals-and-loops.html", "Chapter 2 Conditionals and Loops 2.1 Setup 2.2 Conditional statements 2.3 Loops", " Chapter 2 Conditionals and Loops 2.1 Setup 1. Download data. We will be using a dataset containing citation and alternative metrics for articles published in the PLOS family of journals between 2003 and 2010. The data set was compiled by Priem et al 2012 (publication). Download the data onto your computer from this dropbox link and move it into a directory on your computer that makes sense. 2. Read in data into R. counts &lt;- read.delim(&quot;data/counts-raw.txt&quot;) 2.2 Conditional statements Decision making is an important part of programming. This can be achieved in R programming using conditional statements such as if and if...else. if The syntax of an if statement is: if (test_expression) { do_this } x &lt;- 5 if (x &gt; 0) { print(&quot;positive number&quot;) } ## [1] &quot;positive number&quot; if…else The syntax of an if…else statement is: if (test_expression) { do_this } else { do_that } The else part is optional and is only evaluated if test_expression is FALSE. It is important that the else word be in the same line as the closing brace of the if statement. x &lt;- 1 if (x &gt; 0){ print(&quot;positive number&quot;) } else { print(&quot;negative number&quot;) } ## [1] &quot;positive number&quot; Nested if…else statements You can have more than two test expressions: if (test_expression1) { statement1 } else if (test_expression2) { statement2 } else { statement4 } x &lt;- 0 if (x &lt; 0) { print(&quot;negative number&quot;) } else if (x &gt; 0) { print(&quot;positive number&quot;) } else { print(&quot;zero&quot;) } ## [1] &quot;zero&quot; EXERCISE 2.1 Write a simple if…else statement to check if 5 is an odd number and if it is print “I am odd”, otherwise print “I am even”. 2.3 Loops Conceptually, a loop is a way to repeat a sequence of instructions under certain conditions. They allow you to automate parts of your code that are in need of repetition. for loop The easiest and most frequently used loop in R is a for loop. Here is a demonstration of using loops. year &lt;- c(2015,2016,2017,2018) for(i in 1:length(year)) { print(year[i]) } ## [1] 2015 ## [1] 2016 ## [1] 2017 ## [1] 2018 for(i in 1:length(year)) { print(paste0(&quot;the year is &quot;,year[i])) } ## [1] &quot;the year is 2015&quot; ## [1] &quot;the year is 2016&quot; ## [1] &quot;the year is 2017&quot; ## [1] &quot;the year is 2018&quot; while loop In contrast to a for lop, while loops are used to loop until a specific conditional statement is no longer true. while (test_expression) { do_this } i &lt;- 1 while (i &lt; 6) { print(i) i &lt;- i + 1 } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 EXERCISE 2.2 Challenging. From the PLOS journal publication data we read into R above, here is a plot showing the impact factor according to the F1000 (Faculty of 1000) versus the number of times the PDF was downloaded. Using this dataset, write a for loop containing an if...else statement to change the f1000Factor column into categorical variable with two levels: high impact and low impact. Do this by translating the following sentence into R code: for every element in the f1000Factor variable, if the value is greater than zero, change it to “high_impact”, otherwise, change it to “low_impact”. Bonus. Create a box plot (like the one below) showing the number of PDF downloads for high versus low impact articles. "]
]
