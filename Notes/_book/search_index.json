[
["advanced-plotting.html", "Chapter 6 Advanced Plotting 6.1 Setup 6.2 Review of ggplot2 basics 6.3 Statistics 6.4 Scales 6.5 Colour palettes 6.6 Faceting 6.7 Themes 6.8 Multiple plots 6.9 Additional Resources", " Chapter 6 Advanced Plotting “The greatest value of a picture is when it forces us to notice what we never expected to see” -John Tukey 6.1 Setup 1. Install the tidyverse package. library(tidyverse) ## ── Attaching packages ────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.3.0 ✓ purrr 0.3.4 ## ✓ tibble 3.0.1 ✓ dplyr 0.8.5 ## ✓ tidyr 1.0.3 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.5.0 ## ── Conflicts ───────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() 2. Filter data. We will be using the publication dataset that we read into R in Chapter 2 as counts. research &lt;- filter(counts, articleType == &quot;Research Article&quot;) 6.2 Review of ggplot2 basics ggplot2 is a plotting package that makes it simple to create complex plots from data in a data frame. Graphics are built step by step by adding new elements. Adding layers in this fashion allows for extensive flexibility and customization of plots. A plot can be divided into different fundamental parts: Plot = data + aesthetics + geom Required building blocks: data aesthetics - describe how data are mapped to colour, size, shape, location geoms - geometric objects like points, lines, shapes Optional building blocks: facets - describes how panel plots should be constructed stats - statistical transformations like binning, quantiles, smoothing coordinates - describes the system in which the locations of the geoms will be drawn scales - what scale an aesthetic map uses (ex. male = red, female = blue) To build a ggplot, we will use the following basic template that can be used for different types of plots: ggplot(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;)) + &lt;GEOM_FUNCTION&gt;() Specify which data set to use for the plot using the data argument. Define a “mapping” (using the aesthetic (aes) function), by selecting the variables to be plotted and specifying how to present them in the graph, e.g. as x/y positions or characteristics such as size, shape, color, etc. Add “geoms” – graphical representations of the data in the plot (points, lines, bars). ggplot2 offers many different geoms; common ones include: geom_point() for scatter plots, dot plots, etc. geom_boxplot() for boxplots. geom_histogram() for histograms. geom_barplot() for barplots. geom_line() for trend lines, time series, etc. Example: p &lt;- ggplot(research, aes( x = pdfDownloadsCount, y = wosCountThru2011)) + geom_point() p Adding aesthetics: p &lt;- ggplot(research, aes(x = pdfDownloadsCount, y = wosCountThru2011)) + geom_point(aes(color = journal)) p 6.3 Statistics The function geom_smooth() adds a loess curve to the data along with a 95% confidence interval. p &lt;- ggplot(research, aes(x = pdfDownloadsCount, y = wosCountThru2011)) + geom_point(aes(color = journal)) + geom_smooth() p If we move the colour to the base ggplot call, we get loess curves for each level of that factor. p &lt;- ggplot(research, aes(x = pdfDownloadsCount, y = wosCountThru2011, color = journal)) + geom_point() + geom_smooth() p Check the help page for the function geom_smooth() for more information about how the curve is made. For example, to map a linear model onto the plot, you can choose method = \"lm\". p &lt;- ggplot(research, aes(x = pdfDownloadsCount, y = wosCountThru2011, color = journal)) + geom_point() + geom_smooth(method = &quot;lm&quot;) p 6.4 Scales Now let’s look at the relationship between days since published and citation count. p &lt;- ggplot(research, aes(x = daysSincePublished, y = wosCountThru2011)) + geom_point(aes(color= journal)) p It looks like most of the citation counts are close to 0. We can quickly check the distribution of this variable using a qplot. qplot(data = research, x = wosCountThru2011) To control the plot axes, we use variants of the functions scale_x_* and scale_y_*. p &lt;- ggplot(research, aes(x = daysSincePublished, y = wosCountThru2011)) + geom_point(aes(color= journal)) + scale_y_log10() p ## Warning: Transformation introduced infinite values in continuous y-axis How can we fix this? p &lt;- ggplot(research, aes(x = daysSincePublished, y = log10(wosCountThru2011 + 1))) + geom_point(aes(color= journal)) p Notice what this fix has done to the way the y-axis is labelled. To manually update the axis label, we can use the scale_y_continuous() function. p &lt;- ggplot(research, aes(x = daysSincePublished, y = log10(wosCountThru2011 + 1))) + geom_point(aes(color= journal)) + scale_y_continuous(breaks = c(1,2,3), labels = c(10, 100, 1000), name = &quot;Citations&quot;) p The scale family of functions can also be used to change the colours. p &lt;- ggplot(research, aes(x = daysSincePublished, y = log10(wosCountThru2011 + 1))) + geom_point(aes(color= journal)) + scale_y_continuous(breaks = c(1,2,3), labels = c(10, 100,1000), name = &quot;Citations&quot;) + scale_colour_manual(values = c(&quot;red&quot;,&quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;purple&quot;, &quot;orange&quot;,&quot;cyan&quot;), name = &quot;Journal&quot;) p library(viridis) ## Loading required package: viridisLite p &lt;- ggplot(research, aes(x = daysSincePublished, y = log10(wosCountThru2011 + 1))) + geom_point(aes(color= journal)) + scale_y_continuous(breaks = c(1,2,3), labels = c(10, 100,1000), name = &quot;Citations&quot;) + scale_colour_manual(values = viridis(7), name = &quot;Journal&quot;) p 6.5 Colour palettes Choosing good colours to aid visualization is not trivial and requires some (or a lot of) thought. A set of colour palettes have been developed for easy use with ggplot2 through a package called RColorBrewer. There are three types of these premade palettes: * Sequential * Diverging * Qualitative library(RColorBrewer) display.brewer.all() Or, you can create your own color palettes using the colorRamp() or colorRampPalette() function. colorRamp() returns a function that takes values between 0 and 1, indicating the extremes of the color palette. colorRampPalette() returns a function that takes integer arguments and returns a vector of colours. colorRamp() cols &lt;- colorRamp(c(&quot;red&quot;, &quot;blue&quot;)) cols(0) ## [,1] [,2] [,3] ## [1,] 255 0 0 cols(0.5) ## [,1] [,2] [,3] ## [1,] 127.5 0 127.5 cols(1) ## [,1] [,2] [,3] ## [1,] 0 0 255 colorRampPalette() cols &lt;- colorRampPalette(c(&quot;red&quot;, &quot;blue&quot;)) cols(2) ## [1] &quot;#FF0000&quot; &quot;#0000FF&quot; cols(10) ## [1] &quot;#FF0000&quot; &quot;#E2001C&quot; &quot;#C60038&quot; &quot;#AA0055&quot; &quot;#8D0071&quot; &quot;#71008D&quot; &quot;#5500AA&quot; ## [8] &quot;#3800C6&quot; &quot;#1C00E2&quot; &quot;#0000FF&quot; 6.6 Faceting There are two functions to control how plots are divided into facets: facet_wrap() and facet_grid(). facet_wrap() p &lt;- ggplot(research, aes(x = daysSincePublished, y = log10(wosCountThru2011 + 1), color = journal)) + geom_point() + scale_y_continuous(breaks = c(1,2,3), labels = c(10, 100,1000), name = &quot;Citations&quot;) + facet_wrap(~journal) + geom_smooth(color = &quot;black&quot;, method = &quot;lm&quot;) p It is still difficult to see the spread of the data. Try making the points smaller and transparent. p &lt;- ggplot(research, aes(x = daysSincePublished, y = log10(wosCountThru2011 + 1), color = journal)) + geom_point(size = 0.5, alpha = 0.5) + scale_y_continuous(breaks = c(1,2,3), labels = c(10, 100,1000), name = &quot;Citations&quot;) + facet_wrap(~journal) + geom_smooth(color = &quot;black&quot;, method = &quot;lm&quot;) p facet_grid() What about faceting by two variables? For example, let’s say we want to look at the relationship between days since published and citations for low impact versus high impact articles. First, let’s recreate a variable categorizing high and low impact based on the variable f1000Factor. research &lt;- research %&gt;% mutate(impact = cut(f1000Factor, breaks = c(-Inf,1,Inf), labels = c(&quot;low&quot;, &quot;high&quot;))) p &lt;- ggplot(research, aes(x = daysSincePublished, y = log10(wosCountThru2011 + 1), color = journal)) + geom_point(size = 0.5, alpha = 0.5) + scale_y_continuous(breaks = c(1,2,3), labels = c(10, 100,1000), name = &quot;Citations&quot;) + facet_grid(journal~impact) + geom_smooth(color = &quot;black&quot;, method = &quot;lm&quot;) p By default, R will plot each panel on the same axes. You can override this using the option scales, setting it to free_x to vary the scale across rows, scale_y to vary it across columns, or free to vary across both. p &lt;- ggplot(research, aes(x = daysSincePublished, y = log10(wosCountThru2011 + 1), color = journal)) + geom_point(size = 0.5, alpha = 0.5) + scale_y_continuous(breaks = c(1,2,3), labels = c(10, 100,1000), name = &quot;Citations&quot;) + facet_wrap(~journal, scale = &quot;free&quot;) + geom_smooth(color = &quot;black&quot;, method = &quot;lm&quot;) p Exercise 5.6 Use what you’ve learned to generate the plot below. 6.7 Themes In addition to theme_bw(), which changes the plot background to white, ggplot2 comes with several other themes which can be useful to quickly change the look of your visualization. The complete list of themes is available at https://ggplot2.tidyverse.org/reference/ggtheme.html. theme_minimal() and theme_light() are popular, and theme_void() can be useful as a starting point to create a new hand-crafted theme. The ggthemes package provides a wide variety of options (including an Excel 2003 theme). The ggplot2 extensions website provides a list of packages that extend the capabilities of ggplot2, including additional themes. This is also the place you can customize the text of your plot. p &lt;- ggplot(research, aes(x = daysSincePublished, y = log10(wosCountThru2011 + 1))) + geom_point(aes(color= journal)) + scale_y_continuous(breaks = c(1,2,3), labels = c(10, 100, 1000), name = &quot;Citations&quot;) + theme_bw() + xlab(&quot;Days Since Published&quot;) + theme(axis.title.x = element_text(size = 14, face = &quot;bold&quot;)) p 6.8 Multiple plots There are two useful packages for combining multiple plots: gridExtra and cowplot. gridExtra has two useful functions: grid.arrange() and arrangeGrob(). However, these functions make no attempt at aligning the plot panels; instead, the plots are simply placed into the grid as they are, so the axes are not aligned. If axis alignment is required, the plot_grid() function of the cowplot package is better. We will try using both here. The gridExtra package Let’s say we want to combine the following three plots: plot1 &lt;- ggplot(research, aes(x = journal, fill = journal)) + geom_bar(color = &quot;black&quot;) + theme_bw() plot1 plot2 &lt;- ggplot(research, aes(x = log10(wosCountThru2011 + 1), y = log10(pdfDownloadsCount + 1), color = journal)) + geom_point(size = 0.5, alpha = 0.5) + theme_bw() + geom_smooth() + xlab(&quot;Citations&quot;) + ylab(&quot;Downloads&quot;) + theme(legend.position = &quot;none&quot;) plot2 plot3 &lt;- ggplot(research, aes(x = impact, y = log10(pdfDownloadsCount + 1), fill = journal)) + geom_boxplot() + theme_bw() + ylab(&quot;Downloads&quot;) plot3 To arrange them together, use the grid.arrange() function. library(gridExtra) grid.arrange(plot1, plot2, plot3) To modify how they are arranged, you can use the layout_matrix argument. grid.arrange(plot1, plot2, plot3, ncol = 2, nrow = 2, layout_matrix = rbind(c(1,2), c(3,3))) The cowplot package We can also arrange these plots using the plot_grid() function. library(cowplot) plot_grid(plot1, plot2, plot3) row1 &lt;- plot_grid(plot1, plot2, labels = c(&quot;A&quot;, &quot;B&quot;), nrow = 1) row2 &lt;- plot_grid(plot3, labels = c(&quot;C&quot;), nrow = 1) plot_grid(row1, row2, nrow = 2) 6.8.1 Saving plots The easiest way to save a plot is using the ggsave() function. Exercise 8.1 Using the publication dataset we’ve been using, complete the following tasks. Generate a table containing the mean and standard error of the number of tweets per journal. It should look something like this: ## # A tibble: 7 x 4 ## journal num mean sem ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 pbio 1325 0.0581 0.0202 ## 2 pcbi 1351 0.127 0.0522 ## 3 pgen 1619 0.0655 0.0204 ## 4 pmed 643 0.311 0.188 ## 5 pntd 621 0.0258 0.00906 ## 6 pone 14078 0.493 0.0345 ## 7 ppat 1459 0.0260 0.00881 Use this table to create a bar plot of mean tweets per journal, including standard error. It should look something like this: Hint: you will want to use the function geom_errorbar() to add the error bars. Create a box plot of the number of citations per journal (ie. the variable wosCountThur2011). Colour the journals using the Accent palette from the RColorBrewer package. It should look something like this: Generate a plot that shows the number of downloads over time, coloured by journal. It should look something like this: 6.9 Additional Resources http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html Mailing list: http://groups.google.com/group/ggplot2 Wiki: https://github.com/hadley/ggplot2/wiki Website: http://had.co.nz/ggplot2/ StackOverflow: http://stackoverflow.com/questions/tagged/ggplot Cheatsheet "]
]
