[
["advanced-plotting.html", "Chapter 5 Advanced Plotting 5.1 Setup 5.2 Review of ggplot2 basics 5.3 Scales 5.4 Faceting 5.5 Themes 5.6 Color palettes 5.7 Multiple plots 5.8 Additional Resources", " Chapter 5 Advanced Plotting “The greatest value of a picture is when it forces us to notice what we never expected to see” -John Tukey 5.1 Setup 1. Install the tidyverse package. library(tidyverse) ## ── Attaching packages ────────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.3.0 ✓ purrr 0.3.3 ## ✓ tibble 2.1.3 ✓ dplyr 0.8.4 ## ✓ tidyr 1.0.2 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.4.0 ## ── Conflicts ───────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() 2. Download datasets. We will be using a dataset containing citation and alternative metrics for articles published in the PLOS family of journals between 2003 and 2010. The data set was compiled by Priem et al 2012 (publication). Download the data onto your computer from this dropbox link and move it into a directory on your computer that makes sense. 3. Read in data into R. counts &lt;- read.delim(&quot;data/counts-raw.txt&quot;) research &lt;- filter(counts, articleType == &quot;Research Article&quot;) 5.2 Review of ggplot2 basics ggplot2 is a plotting package that makes it simple to create complex plots from data in a data frame. Graphics are built step by step by adding new elements. Adding layers in this fashion allows for extensive flexibility and customization of plots. A plot can be divided into different fundamental parts: Plot = data + aesthetics + geom Required building blocks: data aesthetics - describe how data are mapped to colour, size, shape, location geoms - geometric objects like points, lines, shapes Optional building blocks: facets - describes how panel plots should be constructed stats - statistical transformations like binning, quantiles, smoothing coordinates - describes the system in which the locations of the geoms will be drawn scales - what scale an aesthetic map uses (ex. male = red, female = blue) To build a ggplot, we will use the following basic template that can be used for different types of plots: ggplot(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;)) + &lt;GEOM_FUNCTION&gt;() Specify which data set to use for the plot using the data argument. Define a “mapping” (using the aesthetic (aes) function), by selecting the variables to be plotted and specifying how to present them in the graph, e.g. as x/y positions or characteristics such as size, shape, color, etc. Add “geoms” – graphical representations of the data in the plot (points, lines, bars). ggplot2 offers many different geoms; common ones include: geom_point() for scatter plots, dot plots, etc. geom_boxplot() for boxplots. geom_histogram() for histograms. geom_barplot() for barplots. geom_line() for trend lines, time series, etc. p &lt;- ggplot(research, aes( x = pdfDownloadsCount, y = wosCountThru2011)) + geom_point() p 5.3 Scales 5.4 Faceting 5.5 Themes In addition to theme_bw(), which changes the plot background to white, ggplot2 comes with several other themes which can be useful to quickly change the look of your visualization. The complete list of themes is available at https://ggplot2.tidyverse.org/reference/ggtheme.html. theme_minimal() and theme_light() are popular, and theme_void() can be useful as a starting point to create a new hand-crafted theme. The ggthemes package provides a wide variety of options (including an Excel 2003 theme). The ggplot2 extensions website provides a list of packages that extend the capabilities of ggplot2, including additional themes. 5.6 Color palettes You can create your own color palettes using the colorRamp() or colorRampPalette() function. colorRamp() returns a function that takes values between 0 and 1, indicating the extremes of the color palette. colorRampPalette() returns a function that takes integer arguments and returns a vector of colours. cols &lt;- colorRamp(c(&quot;red&quot;, &quot;blue&quot;)) cols(0) ## [,1] [,2] [,3] ## [1,] 255 0 0 cols(0.5) ## [,1] [,2] [,3] ## [1,] 127.5 0 127.5 cols(1) ## [,1] [,2] [,3] ## [1,] 0 0 255 cols &lt;- colorRampPalette(c(&quot;red&quot;, &quot;blue&quot;)) cols(2) ## [1] &quot;#FF0000&quot; &quot;#0000FF&quot; cols(10) ## [1] &quot;#FF0000&quot; &quot;#E2001C&quot; &quot;#C60038&quot; &quot;#AA0055&quot; &quot;#8D0071&quot; &quot;#71008D&quot; &quot;#5500AA&quot; ## [8] &quot;#3800C6&quot; &quot;#1C00E2&quot; &quot;#0000FF&quot; Or, you can use the RColorBrewer package to get a premade colour palette. There are three types of palettes: * Sequential * Diverging * Qualitative library(RColorBrewer) display.brewer.all() 5.7 Multiple plots There are two useful packages for combining multiple plots: gridExtra and cowplot. gridExtra has two useful functions: grid.arrange() and arrangeGrob(). However, these functions make no attempt at aligning the plot panels; instead, the plots are simply placed into the grid as they are, so the axes are not aligned. If axis alignment is required, the plot_grid() function of the cowplot package is better. We will try using both here. 5.7.1 The gridExtra package 5.7.2 The cowplot package 5.7.3 Saving plots The easiest way to save a plot is using the ggsave() function. 5.8 Additional Resources http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html Mailing list: http://groups.google.com/group/ggplot2 Wiki: https://github.com/hadley/ggplot2/wiki Website: http://had.co.nz/ggplot2/ StackOverflow: http://stackoverflow.com/questions/tagged/ggplot Cheatsheet "]
]
